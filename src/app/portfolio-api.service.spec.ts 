import { TestBed } from '@angular/core/testing';
import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';
import { PortfolioApiService } from './portfolio-api.service';
import { environment } from '../environments/environment';

describe('PortfolioApiService', () => {
  let service: PortfolioApiService;
  let httpMock: HttpTestingController;
  const apiUrl = environment.apiUrl || 'https://api.familyhomecloud.synology.me/api';

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [HttpClientTestingModule],
      providers: [PortfolioApiService]
    });
    service = TestBed.inject(PortfolioApiService);
    httpMock = TestBed.inject(HttpTestingController);
  });

  afterEach(() => {
    httpMock.verify();
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });

  describe('submitContact', () => {
    it('should submit contact form successfully', () => {
      const mockContactData = {
        name: 'Test User',
        email: 'test@example.com',
        message: 'Test message',
        priority: 'MEDIUM'
      };

      const mockResponse = { 
        success: true, 
        id: '123',
        message: 'Contact submitted successfully'
      };

      service.submitContact(mockContactData).subscribe(response => {
        expect(response).toEqual(mockResponse);
      });

      const req = httpMock.expectOne(`${apiUrl}/contacts`);
      expect(req.request.method).toBe('POST');
      expect(req.request.body).toEqual(mockContactData);
      expect(req.request.headers.get('Content-Type')).toBe('application/json');
      req.flush(mockResponse);
    });

    it('should handle contact submission error', () => {
      const mockContactData = {
        name: 'Test User',
        email: 'test@example.com',
        message: 'Test message'
      };

      service.submitContact(mockContactData).subscribe({
        next: () => fail('should have failed'),
        error: (error) => {
          expect(error.status).toBe(400);
        }
      });

      const req = httpMock.expectOne(`${apiUrl}/contacts`);
      req.flush('Invalid data', { status: 400, statusText: 'Bad Request' });
    });
  });

  describe('getContacts', () => {
    it('should get contacts with default parameters', () => {
      const mockContacts = {
        content: [
          { id: '1', name: 'Test User', email: 'test@example.com', status: 'NEW' }
        ],
        totalElements: 1,
        totalPages: 1,
        size: 10,
        number: 0
      };

      service.getContacts().subscribe(response => {
        expect(response).toEqual(mockContacts);
      });

      const req = httpMock.expectOne(`${apiUrl}/contacts?page=0&size=10`);
      expect(req.request.method).toBe('GET');
      req.flush(mockContacts);
    });

    it('should get contacts with custom parameters', () => {
      const mockContacts = {
        content: [],
        totalElements: 0,
        totalPages: 0,
        size: 5,
        number: 1
      };

      service.getContacts(1, 5, 'RESPONDED', 'HIGH').subscribe(response => {
        expect(response).toEqual(mockContacts);
      });

      const req = httpMock.expectOne(`${apiUrl}/contacts?page=1&size=5&status=RESPONDED&priority=HIGH`);
      expect(req.request.method).toBe('GET');
      req.flush(mockContacts);
    });

    it('should handle get contacts error', () => {
      service.getContacts().subscribe({
        next: () => fail('should have failed'),
        error: (error) => {
          expect(error.status).toBe(500);
        }
      });

      const req = httpMock.expectOne(`${apiUrl}/contacts?page=0&size=10`);
      req.flush('Server error', { status: 500, statusText: 'Internal Server Error' });
    });
  });

  describe('getAnalytics', () => {
    it('should get analytics data', () => {
      const mockAnalytics = {
        totalContacts: 150,
        newContacts: 12,
        respondedContacts: 138,
        priorityBreakdown: {
          HIGH: 15,
          MEDIUM: 85,
          LOW: 50
        },
        recentContacts: []
      };

      service.getAnalytics().subscribe(response => {
        expect(response).toEqual(mockAnalytics);
      });

      const req = httpMock.expectOne(`${apiUrl}/contacts/analytics`);
      expect(req.request.method).toBe('GET');
      req.flush(mockAnalytics);
    });
  });

  describe('markAsResponded', () => {
    it('should mark contact as responded', () => {
      const contactId = '123';
      const mockResponse = { success: true, message: 'Contact marked as responded' };

      service.markAsResponded(contactId).subscribe(response => {
        expect(response).toEqual(mockResponse);
      });

      const req = httpMock.expectOne(`${apiUrl}/contacts/${contactId}/respond`);
      expect(req.request.method).toBe('PUT');
      expect(req.request.body).toEqual({});
      req.flush(mockResponse);
    });
  });

  describe('checkHealth', () => {
    it('should check backend health', () => {
      const mockHealthResponse = {
        status: 'UP',
        service: 'Contact Management Service',
        timestamp: '2025-09-06T10:00:00Z'
      };

      service.checkHealth().subscribe(response => {
        expect(response).toEqual(mockHealthResponse);
      });

      const req = httpMock.expectOne(`${apiUrl}/contacts/health`);
      expect(req.request.method).toBe('GET');
      req.flush(mockHealthResponse);
    });

    it('should handle health check failure', () => {
      service.checkHealth().subscribe({
        next: () => fail('should have failed'),
        error: (error) => {
          expect(error.status).toBe(503);
        }
      });

      const req = httpMock.expectOne(`${apiUrl}/contacts/health`);
      req.flush('Service unavailable', { status: 503, statusText: 'Service Unavailable' });
    });
  });

  describe('trackVisitorSession', () => {
    it('should track visitor session', () => {
      const mockResponse = { sessionId: 'abc123', success: true };

      service.trackVisitorSession().subscribe(response => {
        expect(response).toEqual(mockResponse);
      });

      const req = httpMock.expectOne(`${apiUrl}/visitor/session`);
      expect(req.request.method).toBe('POST');
      expect(req.request.body).toEqual({});
      req.flush(mockResponse);
    });
  });

  describe('trackPageView', () => {
    it('should track page view with all parameters', () => {
      const mockResponse = { tracked: true, pageViewId: 'pv123' };

      service.trackPageView('/about', '/home', 5000).subscribe(response => {
        expect(response).toEqual(mockResponse);
      });

      const expectedPayload = {
        page: '/about',
        previousPage: '/home',
        timeSpent: 5000
      };

      const req = httpMock.expectOne(`${apiUrl}/visitor/pageview`);
      expect(req.request.method).toBe('POST');
      expect(req.request.body).toEqual(expectedPayload);
      req.flush(mockResponse);
    });

    it('should track page view with minimal parameters', () => {
      const mockResponse = { tracked: true };

      service.trackPageView('/contact').subscribe(response => {
        expect(response).toEqual(mockResponse);
      });

      const expectedPayload = {
        page: '/contact',
        previousPage: undefined,
        timeSpent: undefined
      };

      const req = httpMock.expectOne(`${apiUrl}/visitor/pageview`);
      expect(req.request.method).toBe('POST');
      expect(req.request.body).toEqual(expectedPayload);
      req.flush(mockResponse);
    });
  });

  describe('trackVisitorSessionWithId', () => {
    it('should track visitor session with ID', () => {
      const sessionId = 'existing-session-123';
      const mockResponse = { success: true, sessionId };

      service.trackVisitorSessionWithId(sessionId).subscribe(response => {
        expect(response).toEqual(mockResponse);
      });

      const req = httpMock.expectOne(`${apiUrl}/visitor/session-with-id`);
      expect(req.request.method).toBe('POST');
      expect(req.request.body).toEqual({ sessionId });
      req.flush(mockResponse);
    });
  });
});